// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Posts     Posts[]
  Comments  Comments[]
  Likes     Likes[]
  Followers Follow[]   @relation("Following") // users who follow this user
  Following Follow[]   @relation("Follower") // users this user follows
}

model Profile {
  id               String   @id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String
  birthdate        DateTime
  photoProfilePath String?
}

model Posts {
  id         String   @id @default(uuid())
  userId     String
  contentUrl String
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  Comments Comments[]
  Likes    Likes[]
}

model Comments {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id])
  post Posts @relation(fields: [postId], references: [id])
}

model Likes {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id])
  post Posts @relation(fields: [postId], references: [id])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId]) // composite primary key
  @@map("follows") // optional: match table name in the DB
}
